import xxtea
import struct

def decrypt_xxtea_texturepacker(input_file, output_file, key_hex):
    try:
        key_bytes = bytes.fromhex(key_hex)
        
        with open(input_file, "rb") as f:
            data = f.read()
        
        # TexturePacker CCZ header is 16 bytes (magic: 'CCZp')
        header_size = 16
        header = data[:header_size]  # Keep the header intact
        encrypted_data = data[header_size:]  # Extract the encrypted part
        
        # Ensure encrypted data length is a multiple of 4
        if len(encrypted_data) % 4 != 0:
            padding_needed = 4 - (len(encrypted_data) % 4)
            encrypted_data += b'\x00' * padding_needed  # Pad with null bytes
        
        # Attempt decryption without assuming compression
        decrypted_data = xxtea.decrypt(encrypted_data, key_bytes, padding=False)
        
        # Combine the header with the decrypted content
        final_data = header + decrypted_data[:len(data) - header_size]  # Trim padding
        
        with open(output_file, "wb") as f:
            f.write(final_data)
        
        print(f"Decryption successful. Output saved as {output_file}")
    except Exception as e:
        print(f"Error: {e}")
    
    input("Press Enter to exit...")  # Keeps window open

if __name__ == "__main__":
    input_file = "profile.pvr.ccz"
    output_file = "profile.pvr"  # Save as PVR first, before converting to PNG
    key_hex = "42d19aaa077b93d6c920ccc71e286981"  # Replace with your key
    
    decrypt_xxtea_texturepacker(input_file, output_file, key_hex)
